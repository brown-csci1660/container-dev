#! /bin/bash
#set -x

maindir=""
# destdir=cs1680
# container_name=cs1680-container
destdir=cs1660
container_name=cs1660-container

clean=false
verbose=false
arch="`uname -m`"
tag=
platform=
while test "$#" -ne 0; do
    if test "$1" = "-C" -o "$1" = "--clean"; then
        clean=true
        shift
    elif test "$1" = "-V" -o "$1" = "--verbose"; then
        verbose=true
        shift
    elif test "$1" = "-a" -o "$1" = "--arm" -o "$1" = "--arm64"; then
        if test "$arch" = "arm64" -o "$arch" = "aarch64"; then
            platform=linux/arm64
            shift
        else
            echo "\`cs1660-run-docker --arm\` only works on ARM64 hosts" 1>&2
            exit 1
        fi
    elif test "$1" = "-x" -o "$1" = "--x86-64" -o "$1" = "--x86_64" -o "$1" = "--amd64"; then
        platform=linux/amd64
    else
        armtext=
        if test "$arch" = "arm64" -o "$arch" = "aarch64"; then
            armtext=" [-a|--arm] [-x|--x86-64]"
        fi
        echo "Usage: cs1660-run-docker [-C|--clean]$armtext [-V|--verbose]" 1>&2
        exit 1
    fi
done

if test -z "$platform" -a \( "$arch" = "arm64" -o "$arch" = "aarch64" \); then
    platform=linux/arm64
elif test -z "$platform"; then
    platform=linux/amd64
fi
if test -z "$tag" -a "$platform" = linux/arm64; then
    tag=cs1660-dev:arm64
elif test -z "$tag"; then
    tag=cs1660-dev:latest
fi

vexec () {
    if $verbose; then
        echo "$@"
    fi
    exec "$@"
}

has_container() {
    [ $( docker ps -a | grep $container_name | wc -l ) -gt 0 ]
}

remove_containers() {
    echo "Removing all existing cs1660 containers..."
    docker ps -a -f name=cs1660 --format "{{.ID}}" | while read line ; do docker rm --force $line ; done
}

start_container() {
    echo "Entering container..."
    docker start $container_name
    docker exec -it $container_name /bin/bash
}

start_new_container() {
    # Linux
    #-e DISPLAY=unix$DISPLAY \
    #-v /tmp/.X11-unix:/tmp/.X11-unix \
    # MacOS
    # - Install Xquartz, Allow TCP connections in Xquartz
    # - xhost +host.docker.internal
    # - xhost +localhost
    # - -e DISPLAY=host.docker.internal:0

    echo "Starting a new container..."
    mkdir ./home/etc
    echo "Did you ever hear the tragedy of Darth Plagueis The Wise? I thought not. It's not a story the Jedi would tell you. It's a Sith legend. Darth Plagueis was a Dark Lord of the Sith, so powerful and so wise he could use the Force to influence the midichlorians to create life… He had such a knowledge of the dark side that he could even keep the ones he cared about from dying. The dark side of the Force is a pathway to many abilities some consider to be unnatural. He became so powerful… the only thing he was afraid of was losing his power, which eventually, of course, he did. Unfortunately, he taught his apprentice everything he knew, then his apprentice killed him in his sleep. Ironic. He could save others from death, but not himself." > ./home/etc/flag.txt
    
    vexec docker run -it \
        --name $container_name \
        --platform $platform \
        --privileged \
        --cap-add=SYS_PTRACE --cap-add=NET_ADMIN --security-opt seccomp=unconfined \
	--add-host=host.docker.internal:host-gateway \
        -v "$maindir/home":/home/cs1660-user \
        -w "/home/cs1660-user" \
	$x11envarg $x11arg $xpraarg $rtparg $netarg$sshenvarg $tag
}


if stat --format %i / >/dev/null 2>&1; then
    statformatarg="--format"
else
    statformatarg="-f"
fi
myfileid=`stat $statformatarg %d:%i "${BASH_SOURCE[0]}" 2>/dev/null`

dir="`pwd`"
subdir=""
while test "$dir" != / -a "$dir" != ""; do
    thisfileid=`stat $statformatarg %d:%i "$dir"/cs1660-run-docker 2>/dev/null`
    if test -n "$thisfileid" -a "$thisfileid" = "$myfileid"; then
        maindir="$dir"
        break
    fi
    subdir="/`basename "$dir"`$subdir"
    dir="`dirname "$dir"`"
done

if test -z "$maindir" && expr "${BASH_SOURCE[0]}" : / >/dev/null 2>&1; then
    maindir="`dirname "${BASH_SOURCE[0]}"`"
    subdir=""
fi

ssharg=
sshenvarg=
if test -n "$SSH_AUTH_SOCK" -a "`uname`" = Darwin; then
    ssharg=" -v /run/host-services/ssh-auth.sock:/run/host-services/ssh-auth.sock"
    sshenvarg=" -e SSH_AUTH_SOCK=/run/host-services/ssh-auth.sock"
fi

if test -n "$maindir"; then
    existing_image="`docker ps -f status=running -f ancestor=$tag -f volume=/host_mnt"$maindir" --no-trunc --format "{{.CreatedAt}},{{.ID}}" | sort -r | head -n 1`"
    if test -n "$existing_image"; then
        created_at="`echo $existing_image | sed 's/,.*//'`"
        image="`echo $existing_image | sed 's/^.*,//'`"
        image12="`echo $image | head -c 12`"
        echo "* Using running container $image12, created $created_at" 1>&2
        echo "- To start a new container, exit then \`cs1660-run-docker -f\`" 1>&2
        echo "- To kill this container, exit then \`docker kill $image12\`" 1>&2
        vexec docker exec -it$sshenvarg $image /bin/bash
    fi
fi

xhost_warned=false
do_xhost()
{
    arg=$@

    if $(which xhost); then
	xhost $@
    else
	if ! $xhost_warned; then
	    echo "Warning:  xhost was not detected on your system.  You may have issues running gaphical apps like Wireshark."
	    xhost_warned=true
	fi
    fi
}

x11arg=
x11envarg=
if test "$(uname)" = Linux; then
    if grep -qi Microsoft /proc/version; then # Windows
	x11arg=""
	x11envarg="-e DISPLAY=$(awk '/nameserver / {print $2; exit}' /etc/resolv.conf 2>/dev/null):0"
    else # Native Linux
	if test -n "$DISPLAY"; then
	    x11arg="-v /tmp/.X11-unix:/tmp/.X11-unix"
	    x11envarg="-e DISPLAY=unix$DISPLAY"
	    do_xhost local:
	else
	    # Don't bother doing anything if $DISPLAY isn't set--this might be a headless system
	    echo "$DISPLAY is not set, skipping X11 configuration"
	fi
    fi
elif test "$(uname)" = Darwin; then # Mac OS
    x11arg=""
    x11envarg="-e DISPLAY=host.docker.internal:0"
    do_xhost +host.docker.internal
    do_xhost +localhost
fi

# Expose TCP port 14500 on localhost for XPRA
xpraarg="-p 127.0.0.1:14500:14500"

# Expose UDP port 14600 on localhost for RTP
rtparg="-p 127.0.0.1:14600:14600/udp"

netarg=
if test `uname` = Darwin; then
    if ! netstat -n -a -p tcp | grep '\.6169[  ].*LISTEN' >/dev/null; then
        netarg="$netarg "'--expose=6169/tcp -p 6169:6169/tcp'
    fi
    if ! netstat -n -a -p tcp | grep '\.12949[ 	].*LISTEN' >/dev/null; then
        netarg="$netarg "'--expose=12949/tcp -p 12949:12949/tcp'
    fi
elif test -x /bin/netstat; then
    if ! netstat -n -a -p tcp | grep '\.6169[  ].*LISTEN' >/dev/null; then
        netarg="$netarg "'--expose=6169/tcp -p 6169:6169/tcp'
    fi
    if ! netstat -n -l -t | grep ':12949[ 	]' >/dev/null; then
        netarg="$netarg "'--expose=12949/tcp -p 12949:12949/tcp'
    fi
fi

if test -z "$maindir"; then
    echo "Error: could not determine your directory."
    exit 1
fi

if $clean; then
    remove_containers && start_new_container
elif has_container; then
    start_container
else
    start_new_container
fi
